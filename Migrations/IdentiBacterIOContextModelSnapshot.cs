// <auto-generated />
using System;
using IdentiBacterIO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IdentiBacterIO.Migrations
{
    [DbContext(typeof(IdentiBacterIOContext))]
    partial class IdentiBacterIOContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("IdentiBacterIO.Model.Bacteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bacterias");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BacteriaId")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectTestOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BacteriaId");

                    b.HasIndex("CorrectTestOptionId");

                    b.HasIndex("TestId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Procedure")
                        .HasColumnType("text");

                    b.Property<int?>("TestCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestCategoryId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.TestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.TestOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Image", b =>
                {
                    b.HasOne("IdentiBacterIO.Model.Bacteria", "Bacteria")
                        .WithMany("Images")
                        .HasForeignKey("BacteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentiBacterIO.Model.TestOption", "TestOption")
                        .WithMany("Images")
                        .HasForeignKey("CorrectTestOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentiBacterIO.Model.Test", "Test")
                        .WithMany("Images")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bacteria");

                    b.Navigation("Test");

                    b.Navigation("TestOption");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Test", b =>
                {
                    b.HasOne("IdentiBacterIO.Model.TestCategory", "TestCategory")
                        .WithMany("Tests")
                        .HasForeignKey("TestCategoryId");

                    b.Navigation("TestCategory");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.TestOption", b =>
                {
                    b.HasOne("IdentiBacterIO.Model.Test", null)
                        .WithMany("TestOptions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Bacteria", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.Test", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("TestOptions");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.TestCategory", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("IdentiBacterIO.Model.TestOption", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
